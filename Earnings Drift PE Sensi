import numpy as np
import pandas as pd

from zipline.utils import tradingcalendar
from quantopian.pipeline import CustomFactor, Pipeline
from quantopian.algorithm import attach_pipeline, pipeline_output
from quantopian.pipeline.data.builtin import USEquityPricing
from quantopian.pipeline.factors import AverageDollarVolume, Returns
from quantopian.pipeline.filters.morningstar import Q500US, Q1500US
from quantopian.pipeline.classifiers.morningstar import Sector
from quantopian.pipeline.data.zacks import EarningsSurprises
from quantopian.pipeline.data import morningstar as mstar
from quantopian.pipeline.data.eventvestor import EarningsCalendar
from quantopian.pipeline.data.eventvestor import BuybackAuthorizations
from quantopian.pipeline.factors.eventvestor import (
    BusinessDaysUntilNextEarnings,
    BusinessDaysSincePreviousEarnings,
    BusinessDaysSinceBuybackAuth
)

def initialize(context):
    """
    Called once at the start of the algorithm.
    """   
    context.leverage = 1.0
    context.DAYS_TO_HOLD = {'pead' : 6, 'reversal': 1}
    context.RETURNS_LOOKBACK = 5
    context.MAX_IN_ONE = 1.
    
    context.pead_longs = {}
    context.pead_shorts = {}
  
    schedule_function(rebalance_shorts, date_rules.every_day(), time_rules.market_open())
    schedule_function(rebalance_longs, date_rules.every_day(), time_rules.market_open())
    schedule_function(close_positions, date_rules.every_day(), time_rules.market_open())
    schedule_function(record_vars, date_rules.every_day(), time_rules.market_close())
    attach_pipeline(create_pipeline(context), 'pipe')
                
def create_pipeline(context):    
    # Factors
    lag_e_surp = EarningsSurprises.eps_pct_diff_surp.latest
    adv = AverageDollarVolume(window_length=30, mask=USEquityPricing.volume.latest > 0,)
    returns_quantile = Returns(
            window_length=context.RETURNS_LOOKBACK,
            mask=adv.notnan()
            ).quantiles(5)
    
    pe_ratio = mstar.valuation_ratios.pe_ratio.latest  
    
    # Filters
    q500 = Q500US()
    q1500 = Q1500US()
    notnan = lag_e_surp.notnan()
    top_dec = lag_e_surp.percentile_between(90, 100, mask=q500)
    bottom_dec = lag_e_surp.percentile_between(0,10, mask=q500)
    has_announcement = BusinessDaysUntilNextEarnings().eq(1)
    adv_top_5 = adv.percentile_between(95, 100)
    mask = has_announcement
    
    pe_top = pe_ratio.percentile_between(80, 100, mask=q500)
    pe_top2 = pe_ratio.percentile_between(80, 100, mask=q1500)

    # Stock picks from PEAD Reversal
    pead_reversal_longs = mask & bottom_dec & notnan & q500 
    pead_reversal_shorts = mask & top_dec & notnan & q500 & pe_top
    
    # Stock picks from Earnings Buybacks
    reversal_longs = mask & returns_quantile.eq(0) & adv_top_5 & q1500
    reversal_shorts = mask & returns_quantile.eq(4)  & adv_top_5 & q1500 & pe_top2
    
    # Overall Stock Selection
    stocks = pead_reversal_longs | pead_reversal_shorts | reversal_longs | reversal_shorts
    
    return Pipeline(columns= {
                        'pricing': USEquityPricing.close.latest,
                        'pead_reversal_longs': pead_reversal_longs,
                        'pead_reversal_shorts': pead_reversal_shorts,
                        'reversal_longs': reversal_longs,
                        'reversal_shorts': reversal_shorts
                    },
                    screen=stocks)

def before_trading_start(context, data):
    """
    Called every day before market open.
    """
    context.output = pipeline_output('pipe')

    # Currently held PEAD reversal picks get updated and dropped if held for longer than hold time        
    context.pead_longs = {k:v+1 for k,v in context.pead_longs.items() if v < context.DAYS_TO_HOLD['pead']}
    context.pead_shorts = {k:v+1 for k,v in context.pead_shorts.items() if v < context.DAYS_TO_HOLD['pead']}
    
    # Stocks picked by 5 day return reversals are reset (hold time is one day), so not necessary to track time
    context.reversal_longs = []
    context.reversal_shorts = []
    
    # New PEAD reversals positions from our pipeline
    for stock in context.output.index[context.output['pead_reversal_longs'] == True]:
        context.pead_longs[stock] = 0
    
    for stock in context.output.index[context.output['pead_reversal_shorts'] == True]:
        context.pead_shorts[stock] = 0
    
    # New 5 day return reversal positions from our pipeline
    for stock in context.output.index[context.output['reversal_longs'] == True]:
        if stock not in context.pead_longs and stock not in context.pead_shorts:
            context.reversal_longs.append(stock)
            
    for stock in context.output.index[context.output['reversal_shorts'] == True]:
        if stock not in context.pead_longs and stock not in context.pead_shorts:
            context.reversal_shorts.append(stock)
            
    # our aggregate long/short portfolio
    context.aggregate_longs = set(context.pead_longs.keys() + context.reversal_longs)
    context.aggregate_shorts = set(context.pead_shorts.keys() + context.reversal_shorts)
    context.aggregate_stocks = context.aggregate_longs | context.aggregate_shorts
    

def rebalance_shorts(context, data):
    """Manage short positions"""
    short_list = context.aggregate_shorts
    for equity in short_list:
        if data.can_trade(equity):
            order_target_percent(equity, -min(0.5 / len(short_list), context.MAX_IN_ONE))
            
def rebalance_longs(context, data):
    """Manage longs positions"""
    long_list = context.aggregate_longs
    for equity in long_list:
        if data.can_trade(equity):
            order_target_percent(equity, min(0.5 / len(long_list), context.MAX_IN_ONE))

def close_positions(context, data):
    """Close currently held positions which have been held for > hold time"""
    for position in context.portfolio.positions:
        if position not in context.aggregate_stocks:
            order_target_percent(position, 0)
            
def record_vars(context, data):
    """
    Plot variables at the end of each day.
    """
    record(leverage=context.account.leverage)
